@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	Layout = "_LayoutEmpty";
}

<div style="display:flex;flex-direction:column;align-items:flex-start;align-content:flex-start;align-self:stretch">
	<h1></h1>

	<div id="app" style="display: flex;flex-direction: column;width: 850px;">
		<div id="items"  class="grid-container">
		    <kf-number text = 'Id' v-model = 'Item.Id' scale="0"   ></kf-number>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Barcode))' v-model = 'Item.Barcode'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Name))' v-model = 'Item.Name'    ></kf-input>
<kf-input text = 'Location' v-model = 'Item.Location'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Well))' v-model = 'Item.Well'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Doctor))' v-model = 'Item.Doctor'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Patient))' v-model = 'Item.Patient'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Parent))' v-model = 'Item.ParentName'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Process))' v-model = 'Item.ProcessName'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_User))' v-model = 'Item.UserName'    ></kf-input>
<kf-input text = 'Hospital' v-model = 'Item.HospitalName'    ></kf-input>
<kf-input text = 'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Box))' v-model = 'Item.BatchName'    ></kf-input>
<kf-input text = 'Model' v-model = 'Item.Model'    ></kf-input>
<kf-input text = 'Result' v-model = 'Item.Result'    ></kf-input>
<kf-input text = 'Files' v-model = 'Item.Files'    ></kf-input>
<kf-input text = 'Sended' v-model = 'Item.Sended'    ></kf-input>
<kf-input text = 'PropS1' v-model = 'Item.PropS1'    ></kf-input>
<kf-input text = 'PropS2' v-model = 'Item.PropS2'    ></kf-input>
<kf-input text = 'PropS3' v-model = 'Item.PropS3'    ></kf-input>
<kf-input text = 'PropS4' v-model = 'Item.PropS4'    ></kf-input>
<kf-input text = 'PropS5' v-model = 'Item.PropS5'    ></kf-input>
<kf-input text = 'Sample Type ' v-model = 'Item.SampleType'    ></kf-input>

		</div>

		<div style="display:flex;flex-direction:row;">

			<kf-button id="saveButton" v-if="mode!='view'"		 v-on:click.native="saveClick"	text="Coхранить"		image="save"  ></kf-button>
			<kf-button id="closeButton" v-if="mode!='view'"	     v-on:click.native="closeClick"	text="Закрыть"			image="delete" style="margin-left:auto"  ></kf-button>
		</div>
	</div>
</div>

<script type="module" >

    $(window).on("load",function () {
	@Html.Raw(TempData["StartupScript"])
		});
		 let Mode = '@ViewBag.Mode'
	     let Id = '@ViewBag.Id';
	   // load components ( remove unused please)
	import { KfField, KfInput, KfDate, KfSelect, KfNumber, KfCheck, KfTextarea, KfText, KfButton, KfGridLookUp } from '/js/vue3Components.js';

		import { baseMixin } from '/js/BaseMixin.js';
		const { ref } = Vue;
	        const app = Vue.createApp({
		 mixins: [baseMixin],
		 data() {
			 return {
				 Item: {  }
			 }
		 }
		 ,
		 methods: {
			 get() {
				 const pathEnd = "SamplesBookCard/Get?id="+Id;
				 this.FetchJson( pathEnd,this.ok)
			 },
			 ok(data) {
				this.Item = data;
			 },
			 saveClick() {
                alert('SaveClick')
			 },

			closeClick() {
			   closePopup()
		  }
		 },
		 mounted: function () {
          this.get()


		 }
	 });
	// Registering components ( remove unused please)
	  app.component('kf-field', KfField);
	  app.component('kf-button', KfButton);
	  app.component('kf-input', KfInput);
	  app.component('kf-date', KfDate);
	  app.component('kf-select', KfSelect);
	  app.component('kf-number', KfNumber);
	  app.component('kf-check', KfCheck);
	  app.component('kf-textarea', KfTextarea);
	  app.component('kf-text', KfText);
	  app.component('kf-lookup', KfGridLookUp);
	// Mounting Vue app
	const vue_ = app.mount('#app');
</script>
