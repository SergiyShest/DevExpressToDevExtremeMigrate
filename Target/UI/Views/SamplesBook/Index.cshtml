@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	Layout = "_Layout";
}


<div style="display:flex;flex-direction:column;align-items:flex-start;align-content:flex-start;align-self:stretch">
	<h1>Samples Book</h1>

	<div id="app" style="display: flex;flex-direction: column;width: 450px;">
		<div style="display: flex;align-items:center">
			<div style="width: 100px;margin-left:15px">Дата:</div>
			oт<input id="d1From" type="date" v-model="from" style="margin:3px">
			до<input id="d1To" type="date" v-model="to" style="margin:3px">
			<kf-button id="findButton"  v-if="mode!='view'" v-on:click.native="find" text="Найти" image="find"></kf-button>
		</div>

		<div style="display:flex;flex-direction:row;">
			<kf-button id="addButton"    v-if="mode!='view'" v-on:click.native="addClick"	text="Добавить"		 image="add"	></kf-button>
			<kf-button id="editButton"   v-if="mode!='view'" v-on:click.native="editClick"	text="Редактировать" image="edit"	></kf-button>
			<kf-button id="copyButton"   v-if="mode!='view'" v-on:click.native="copyClick"	text="Копировать"	 image="copy"	></kf-button>
			<kf-button id="deleteButton" v-if="mode!='view'" v-on:click.native="deleteClick"	text="Удалить"	 image="delete"	></kf-button>
		</div>
	</div>
	<div id="grid" />
</div>

<script type="module">

	 let Mode = '@ViewBag.Mode'
	 let focusedRowKey = null;
     let storageKey = 'C:UsersSaergeysourcereposDevExpressToDevExtremeMigrationSourceUIViewsSamplesBook';
     import { KfButton } from '/js/vue3Components.js';
     import { baseMixin } from '/js/BaseMixin.js';
     const { ref } = Vue;

	 function setDataSource(from,to) {
		 const dataSource = DevExpress.data.AspNet.createStore({
			 key: "Id",
			 loadUrl: document.location.origin + "/SamplesBook/Get",
			 loadParams: { from: from, to: to }
		 });
		 var grid = $("#grid").dxDataGrid("instance");
		 grid.option("dataSource", dataSource);
	 }

	function OnFocusedRowChanged(e) {
		focusedRowKey = e.component.option('focusedRowKey');
	}
  $("#grid").dxDataGrid({
	    onRowClick: onRowClick,
        stateStoring: {
            storageKey: storageKey,
        },
        "export": {//выгрузка в excel
            enabled: true,
            fileName: "Отчет ",
            allowExportSelectedData: true
        },
        focusedRowEnabled: true,
        onFocusedRowChanged: OnFocusedRowChanged,
        columns:[
			{
				caption:'Id',
				dataField:'Id',
				dataType:'text',
				width:'50px',
				visible:false,
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Barcode))',
				dataField:'Barcode',
				dataType:'text',
				width:'100px',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Name))',
				dataField:'Name',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Location',
				dataField:'Location',
				dataType:'text',
				width:'200px',
			}
			,
			{
				caption:'Sample Type ',
				dataField:'SampleType',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Box))',
				dataField:'BatchName',
				dataType:'text',
				width:'200px',
			}
			,
			{
				caption:'Result',
				dataField:'Result',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Content Count',
				dataField:'ContentListCount',
				dataType:'text',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Well))',
				dataField:'Well',
				dataType:'text',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Process))',
				dataField:'ProcessName',
				dataType:'text',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_User))',
				dataField:'UserName',
				dataType:'text',
			}
			,
			{
				caption:'Aliquot',
				dataField:'IsChild',
				dataType:'boolean',
				width:'50px',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Parent))',
				dataField:'ParentName',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Patient))',
				dataField:'Patient',
				dataType:'text',
			}
			,
			{
				caption:'Patient Id',
				dataField:'PatientId',
				dataType:'text',
				visible:false,
			}
			,
			{
				caption:'Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Doctor))',
				dataField:'Doctor',
				dataType:'text',
			}
			,
			{
				caption:'Doctor Id',
				dataField:'DoctorId',
				dataType:'text',
				visible:false,
			}
			,
			{
				caption:'Hospital',
				dataField:'HospitalName',
				dataType:'text',
			}
			,
			{
				caption:'Hospital Id',
				dataField:'HospitalId',
				dataType:'text',
				visible:false,
			}
			,
			{
				caption:'Location Id',
				dataField:'LocationId',
				dataType:'text',
				visible:false,
			}

		]

    });
	const app = Vue.createApp({
		 mixins: [baseMixin],
		 data() {
			 return {
				 from: null,
				 to: null
			 }
		 }
		 ,
		 methods: {
			 find() {
				 localStorage.setItem(storageKey + 'dateFrom', this.from);
				 localStorage.setItem(storageKey + 'dateTo', this.to);
                 setDataSource(this.from,this.to);
			 }
			 ,
			addClick() {
				xPopup ('Карточка vSamplesBook', '/SamplesBookCard/Index' + '?page_mode=modal', 1024, 916);
			}
			,
			 editClick() {
				if (checkItem(focusedRowKey)) {
					xPopup('Карточка vSamplesBook', '/SamplesBookCard/Index?id=' + focusedRowKey  , 1024, 916);
				}

			},
			 copyClick() {
				if (checkItem(focusedRowKey)) {
					   xPopup('Карточка vSamplesBook', '/SamplesBookCard/Index?id=' + focusedRowKey + '&mode=copy', 1024, 916);
				}
			},
			 deleteClick() {
			  if (checkItem(focusedRowKey)) {
				   const path = '/SamplesBookCard/Delete?id='+ focusedRowKey
				   this.fetch(this.onDelete, path)
			  }
		   },
		   onDelete(answer) {
				 if (answer && answer.message) {
					 alert(answer.message);
				 }
				 this.find()
			 }
		 },
		 mounted: function () {

			let fr = localStorage.getItem(storageKey + 'dateFrom');
			if (fr != 'null') this.from = fr;

			let to = localStorage.getItem(storageKey + 'dateTo');
			if (to != 'null') this.to = to;
			
			this.find()
		 }
	 });

	 // Registering components
     app.component('kf-button', KfButton);
	 const vue_ = app.mount('#app');

	 function onRowClick(e) {
        var component = e.component,
            prevClickTime = component.lastClickTime;
        component.lastClickTime = new Date();
        if (prevClickTime && (component.lastClickTime - prevClickTime < 300)) {
            vue_.editClick()
        }
    }


</script>
