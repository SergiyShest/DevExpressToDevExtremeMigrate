@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_LayoutEmpty";
}
<style>
    /* Стилизация треугольной кнопки */
    .triangle-button {
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid #111;
        cursor: pointer;
    }

    /* Контейнер для выпадающего списка */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    /* Выпадающий контент (скрыт по умолчанию) */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 3px 3px 0px rgba(0,0,0,0.2);
        text-align: left; /* Добавлено для выравнивания текста влево */
        z-index: 1;
    }


        /* Ссылки внутри выпадающего меню */
        .dropdown-content a {
            color: black;
            padding: 3px;
            align-items: start;
            text-decoration: none;
            display: block;
        }

            /* Изменение цвета ссылок при наведении */
            .dropdown-content a:hover {
                background-color: #f1f1f1
            }

    /* Показывать выпадающий список при наведении */
    .dropdown:hover .dropdown-content {
        display: block;
    }

</style>

<style>
    .cf-dropdown-container {
        position: relative;
        display: inline-block;
        background-color: aqua
    }

    .cf-dropdown {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        width: 500px;
        height: 200px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

</style>
@*
<h1>sssssssssssss</h1> *@
<div style="display:flex;flex-direction:column;align-items:flex-start;align-content:flex-start;align-self:stretch">
    @*     <div class="cf-dropdown-container" style="width:500px">
    <div> text:</div>
    <input style="width:100px;display:inline-block"></input>
    <div style="width:100px;display:inline-block"> text:</div>
    <input style="width:100px;display:inline-block"></input>
    <button onclick="toggleDropdown()">Show Table</button>
    <div class="cf-dropdown" id="myDropdown">
    <table>
    <thead>
    <tr>
    <th>Header 1</th>
    <th>Header 2</th>
    <th>Header 3</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>Data 1</td>
    <td>Data 2</td>
    <td>Data 3</td>
    </tr>
    <tr>
    <td>Data 4</td>
    <td>Data 5</td>
    <td>Data 6</td>
    </tr>
    <!-- Add more rows as needed -->
    </tbody>
    </table>
    </div>
    </div>

    <div class="cf-dropdown-container">
    <div class="coll">{{ text }}:</div>

    <div style="width:150px;height:30px;background:green;border: solid 1px"
    :title="notValidText"
    v-bind:value="value"
    v-on:input="valChanged($event)"></div>

    <button onclick="toggleDropdown()>Find</button>

    <img v-if="!valid" src="invalid.png" />
    <div class="cf-dropdown"
    id="lookUpId"
    :style="{ display: tableVisible ? 'block' : 'none' }"
    >
    <h1>sssssssssssss</h1>
    </div>

    </div> *@

    <script>
        function toggleDropdown() {
            console.log('-------')
            var dropdown = document.getElementById("lookUpId");
            if (dropdown.style.display === "block") {
                dropdown.style.display = "none";
            } else {
                dropdown.style.display = "block";
            }
            var dropdown = document.getElementById("myDropdown");
            if (dropdown.style.display === "block") {
                dropdown.style.display = "none";
            } else {
                dropdown.style.display = "block";
            }

        }

        // // Close the dropdown if the user clicks outside of it
        // window.onclick = function (event) {
        //     if (!event.target.matches('.container')) {
        //         var dropdowns = document.getElementsByClassName("dropdown");
        //         for (var i = 0; i < dropdowns.length; i++) {
        //             var openDropdown = dropdowns[i];
        //             if (openDropdown.style.display === "block") {
        //                 openDropdown.style.display = "none";
        //             }
        //         }
        //     }
        // }
    </script>


    <div id="app" style="display: flex;flex-direction: column;width: 850px;">

        <div id="items" class="grid-container">
            <div>{{Id}}</div>
            <kf-look-up text='Bar-code' 
           @*  load-url="/Api/GetOsts"  *@
             :items="osts"
            display-expr="${name} loc=${location}"
            :value='ostId'></kf-look-up>
            <kf-input text='Barcode' v-model='Item.Barcode' id="mBarcode" require>  </kf-input>

            <kf-num text='Id' v-model='Id' id="mId" scale="3"></kf-num>

            <kf-input text='Name' v-model='Item.SampleName' require></kf-input>
            <kf-input text='Status' v-model='Item.Status'></kf-input>
            <kf-input text='Location' v-model='Item.Location'></kf-input>
            <kf-input text='Amount' v-model='Item.AmountInOut'></kf-input>
            <kf-input text='Signature' v-model='Item.Signature'></kf-input>
            <kf-input text='UserName' v-model='Item.UserName'></kf-input>
            <kf-input text='batch Barcode' v-model='Item.batchBarcode'></kf-input>
            <kf-input text='Operation' v-model='Item.Operation'></kf-input>

        </div>

        <div style="display:flex;flex-direction:row;">

            <kf-button id="saveButton" v-if="mode!='view'" v-on:click.native="saveClick" text="Coхранить" image="save"></kf-button>
            <kf-button id="closeButton" v-if="mode!='view'" v-on:click.native="closeClick" text="Закрыть" image="delete" style="margin-left:auto"></kf-button>
            <kf-dropdown-button text="Закрыть" image="delete" :items="dropdownItems" @@action="performAction">
            </kf-dropdown-button>


        </div>
    </div>
</div>




<script type="module">

    const osts = [
        {
            "id": 1,
            "name": "Name 1",
            "location": "Location 1",
            "state": "Inactive"
        },
        {
            "id": 2,
            "name": "Name 2",
            "location": "Location 2",
            "state": "Active"
        },
        {
            "id": 3,
            "name": "Name 3",
            "location": "Location 3",
            "state": "Inactive"
        },
        {
            "id": 4,
            "name": "Name 4",
            "location": "Location 4",
            "state": "Active"
        },
        {
            "id": 5,
            "name": "Name 5",
            "location": "Location 5",
            "state": "Inactive"
        },
        {
            "id": 6,
            "name": "Name 6",
            "location": "Location 6",
            "state": "Active"
        },
        {
            "id": 7,
            "name": "Name 7",
            "location": "Location 7",
            "state": "Inactive"
        },
        {
            "id": 8,
            "name": "Name 8",
            "location": "Location 8",
            "state": "Active"
        },
        {
            "id": 9,
            "name": "Name 9",
            "location": "Location 9",
            "state": "Inactive"
        },
        {
            "id": 10,
            "name": "Name 10",
            "location": "Location 10",
            "state": "Active"
        },
        {
            "id": 11,
            "name": "Name 11",
            "location": "Location 11",
            "state": "Inactive"
        },
        {
            "id": 12,
            "name": "Name 12",
            "location": "Location 12",
            "state": "Active"
        },
        {
            "id": 13,
            "name": "Name 13",
            "location": "Location 13",
            "state": "Inactive"
        },
        {
            "id": 14,
            "name": "Name 14",
            "location": "Location 14",
            "state": "Active"
        },
        {
            "id": 15,
            "name": "Name 15",
            "location": "Location 15",
            "state": "Inactive"
        },
        {
            "id": 16,
            "name": "Name 16",
            "location": "Location 16",
            "state": "Active"
        },
        {
            "id": 17,
            "name": "Name 17",
            "location": "Location 17",
            "state": "Inactive"
        },
        {
            "id": 18,
            "name": "Name 18",
            "location": "Location 18",
            "state": "Active"
        },
        {
            "id": 19,
            "name": "Name 19",
            "location": "Location 19",
            "state": "Inactive"
        },
        {
            "id": 20,
            "name": "Name 20",
            "location": "Location 20",
            "state": "Active"
        },
        {
            "id": 21,
            "name": "Name 21",
            "location": "Location 21",
            "state": "Inactive"
        },
        {
            "id": 22,
            "name": "Name 22",
            "location": "Location 22",
            "state": "Active"
        },
        {
            "id": 23,
            "name": "Name 23",
            "location": "Location 23",
            "state": "Inactive"
        },
        {
            "id": 24,
            "name": "Name 24",
            "location": "Location 24",
            "state": "Active"
        },
        {
            "id": 25,
            "name": "Name 25",
            "location": "Location 25",
            "state": "Inactive"
        },
        {
            "id": 26,
            "name": "Name 26",
            "location": "Location 26",
            "state": "Active"
        },
        {
            "id": 27,
            "name": "Name 27",
            "location": "Location 27",
            "state": "Inactive"
        },
        {
            "id": 28,
            "name": "Name 28",
            "location": "Location 28",
            "state": "Active"
        },
        {
            "id": 29,
            "name": "Name 29",
            "location": "Location 29",
            "state": "Inactive"
        },
        {
            "id": 30,
            "name": "Name 30",
            "location": "Location 30",
            "state": "Active"
        }
    ]



    $(window).on("load", function () {
    @Html.Raw(TempData["StartupScript"])
                });
    let Mode = '@ViewBag.Mode'
    let Id = '@ViewBag.Id';
    // load components ( remove unused please)
    import { KfField, KfInput, KfDate, KfSelect, KfNumber, KfCheck, KfTextarea, KfText, KfButton, KfDropdownButton } from '/js/vue3Components.js';
    import { KfNum } from '/js/vue3number.js';
    import { KfGridLookUp } from '/js/lookUp.js';
    import { baseMixin } from '/js/BaseMixin.js';
    const { ref } = Vue;
    const app = Vue.createApp({
        mixins: [baseMixin],
        data() {
            return {
                ostId:6,
                osts:osts,
                Id: -34343443.444,
                Item: {},
                dropdownItems: [
                    { Id: 1, Text: "edit", Image: "checked", Action: this.edit },
                    { Id: 2, Text: "Удаление", Image: "save", Action: this.delete },
                    { Id: 3, Text: "Просмотр", Image: "add", Action: this.view }
                ]
            }
        }
        ,
        methods: {
            get() {
                const pathEnd = "Common/CustodyLogCard/Get?id=" + Id;
                this.fetch(this.ok, pathEnd)
            },
            ok(data) {
                this.Item = data;
            },

            performAction(item) {
                if (item && item.Action) {
                    item.Action();
                }
            },
            edit() {
                alert('Редактирование');
            },
            delete() {
                alert('Удаление');
            },
            view() {
                alert('Просмотр');
            },

            saveClick() {
                const pathEnd = "Common/CustodyLogCard/Save?id=" + Id;
                this.fetch(this.onSave, pathEnd)
            },
            onSave(answer) {
                if (answer && answer.message) {
                    alert(answer.message);
                }
                this.get()
            }
        },
        mounted: function () {
            this.get()
        }
    });
    // Registering components ( remove unused please)
    app.component('kf-num', KfNum);
    app.component('kf-field', KfField);
    app.component('kf-button', KfButton);
    app.component('kf-input', KfInput);
    app.component('kf-date', KfDate);
    app.component('kf-select', KfSelect);
    app.component('kf-number', KfNumber);
    app.component('kf-check', KfCheck);
    app.component('kf-textarea', KfTextarea);
    app.component('kf-text', KfText);
    app.component('kf-dropdown-button', KfDropdownButton);
    app.component('kf-look-up', KfGridLookUp);
    // Mounting Vue app
    const vue_ = app.mount('#app');
</script>
