@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	Layout = "_Layout";
}


<div style="display:flex;flex-direction:column;align-items:flex-start;align-content:flex-start;align-self:stretch">
	<h1>Reagent Type</h1>

	<div id="app" style="display: flex;flex-direction: column;width: 450px;">
		<div style="display: flex;align-items:center">
			<div style="width: 100px;margin-left:15px">Дата:</div>
			oт<input id="d1From" type="date" v-model="from" style="margin:3px">
			до<input id="d1To" type="date" v-model="to" style="margin:3px">
			<kf-button id="findButton"  v-if="mode!='view'" v-on:click.native="findDate" text="Найти" image="find"></kf-button>
		</div>

		<div style="display:flex;flex-direction:row;">
			<kf-button id="addButton" v-if="mode!='view'"		v-on:click.native="addClick"	text="Добавить"			image="add"></kf-button>
			<kf-button id="editButton" v-if="mode!='view'"		v-on:click.native="editClick"	text="Редактировать"	image="edit"></kf-button>
			<kf-button id="copyButton" v-if="mode!='view'"		v-on:click.native="copyClick"	text="Копировать"		image="copy"></kf-button>
			<kf-button id="deleteButton" v-if="mode!='view'"	v-on:click.native="deleteClick"	text="Удалить"			image="delete"></kf-button>
		</div>
	</div>
	<div id="grid" />
</div>

<script type="module">

    $(window).on("load",function () {
	@Html.Raw(TempData["StartupScript"])
		});
	 let Mode = '@ViewBag.Mode'
	 let focusedRowKey = null;
     let storageKey = 'C:UsersSaergeysourcereposDevExpressToDevExtremeMigrationSourceUIAreasReagentsViewsReagentTypeJournal';
     import { KfButton } from '/js/vue3Components.js';
     import { baseMixin } from '/js/BaseMixin.js';
     const { ref } = Vue;

	 function setDataSource() {
		 const dataSource = DevExpress.data.AspNet.createStore({
			 key: "Id",
			 loadUrl: document.location.origin + "/Reagents/ReagentTypeJournal/Get",
		 });
		 var grid = $("#grid").dxDataGrid("instance");
		 grid.option("dataSource", dataSource);
	 }

	function OnFocusedRowChanged(e) {
		focusedRowKey = e.component.option('focusedRowKey');
	}

	const app = Vue.createApp({
		 mixins: [baseMixin],
		 data() {
			 return {
				 from: null,
				 to: null
			 }
		 }
		 ,
		 methods: {
			 findDate() {
				 localStorage.setItem(storageKey + 'dateFrom', this.from);
				 localStorage.setItem(storageKey + 'dateTo', this.to);
				 const pathEnd = "/Reagents/ReagentTypeJournal/SetFilter";
				 const data = { from: this.from, to: this.to };
				 this.fetch(this.ok, pathEnd, data)
			 },
			 ok() {
			    setDataSource();
			 }
			 ,
			addClick() {
				xPopup ('Карточка vReagentType', '/Reagents/ReagentTypeCard/Index' + '?page_mode=modal', 1024, 916);
			}
			,
			 editClick() {
				if (checkItem(focusedRowKey)) {
					xPopup('Карточка vReagentType', '/Reagents/ReagentTypeCard/Index?id=' + focusedRowKey  , 1024, 916);
				}

			},
			 copyClick() {
				if (checkItem(focusedRowKey)) {
					   xPopup('Карточка vReagentType', '/Reagents/ReagentTypeCard/Index?id=' + focusedRowKey + '&mode=copy', 1024, 916);
				}
			},
			 deleteClick() {
			  if (checkItem(focusedRowKey)) {
				   const path = '/Reagents/ReagentTypeCard/Delete?id='+ focusedRowKey
				   this.fetch(this.onDelete, path)
			  }
		   },
		   onDelete(answer) {
				 if (answer && answer.message) {
					 alert(answer.message);
				 }
				 this.ok()
			 }
		 },
		 mounted: function () {

			let fr = localStorage.getItem(storageKey + 'dateFrom');
			if (fr != 'null') this.from = fr;

			let to = localStorage.getItem(storageKey + 'dateTo');
			if (to != 'null') this.to = to;
			
			this.findDate()
		 }
	 });

	 // Registering components
     app.component('kf-button', KfButton);
	 const vue_ = app.mount('#app');

	 function onRowClick(e) {
        var component = e.component,
            prevClickTime = component.lastClickTime;
        component.lastClickTime = new Date();
        if (prevClickTime && (component.lastClickTime - prevClickTime < 300)) {
            vue_.editClick()
        }
    }

  $("#grid").dxDataGrid({
	    onRowClick: onRowClick,
        stateStoring: {
            storageKey: storageKey,
        },
        "export": {//выгрузка в excel
            enabled: true,
            fileName: "Отчет ",
            allowExportSelectedData: true
        },
        focusedRowEnabled: true,
        onFocusedRowChanged: OnFocusedRowChanged,
        columns:[
			{
				caption:'Id',
				dataField:'Id',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Name',
				dataField:'Name',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Barcode',
				dataField:'Barcode',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Quantity',
				dataField:'Quantity',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'UnitName',
				dataField:'UnitName',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Size',
				dataField:'Size',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Storage Temperature',
				dataField:'StorageTemp',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Chaild Count',
				dataField:'ChaildCount',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Contains in Count',
				dataField:'ParentCount',
				dataType:'text',
				width:'50px',
			}
			,
			{
				caption:'Vendor Name',
				dataField:'VendorName',
				dataType:'text',
				width:'50px',
			}

		]

    });

</script>
