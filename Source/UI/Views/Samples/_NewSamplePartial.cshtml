
@using Sasha.Lims.WebUI.Controllers;
@using Sasha.Lims.WebUI.Infrastructure.ViewModelHelpers;

@model Sasha.Lims.WebUI.Models.SampleViewModel
@{ 
	SamplesController controller = (SamplesController)ViewContext.Controller;

	void populateControlsGroup(MVCxFormLayoutGroup<Sasha.Lims.WebUI.Models.SampleViewModel> group)
	{
		group.GroupBoxDecoration = GroupBoxDecoration.None;
		group.ColCount = 2;

		group.Items.Add(m => m.Barcode, i => {
			i.Caption = "Barcode:";

			i.NestedExtension().TextBox(s =>
			{

				s.ClientEnabled = true;
			});

		});
		group.Items.AddGroupItemForVmField(m => m.Name);
		group.Items.Add(m => m.Barcode, i =>
		{
			i.Caption = "";
			i.NestedExtension().Button(s =>
			{
				s.Name = "BarcodeBtn";
				s.Text = "Generate barcode";
				s.ClientSideEvents.Click = "function(){ GenerateBarcode();}";
			});

		});



		group.Items.AddGroupItemForVmField(m => m.CollectedDateTime);
		group.Items.AddGroupItemForVmField(m => m.TubeTypeId);
		group.Items.AddGroupItemForVmField(m => m.SampleTypeId);
		group.Items.AddGroupItemForVmField(m => m.ModelId);
		group.Items.AddGroupItemForVmField(m => m.SampleStatusId);
		group.Items.AddGroupItemForVmField(m => m.SampleWorkflowStatusId);

		group.Items.Add(i =>
		{
			////
			i.Caption = "Location:";
			//i.FieldName = "LocationId";
			i.Name = "EditingLocation";

			i.NestedExtension().DropDownEdit(cb =>
			{
				cb.Properties.ClientSideEvents.Init = "onInitTreeViewLocations";
				cb.Properties.ClientSideEvents.DropDown = "onDropDownTreeViewLocations";
				cb.Properties.NullText = "(No Selection)";
				cb.ReadOnly = true;
				cb.SetDropDownWindowTemplateContent(c => Html.RenderAction("LocationsTreeListPartial", new { selectedId = Model?.LocationId }));
			});
		});

		group.Items.AddGroupItemForVmField(m => m.Well);
		group.Items.AddGroupItemForVmField(m => m.DoctorId).SetNestedContent(() => Html.RenderPartial("~/Views/Doctors/_ComboBoxPartial.cshtml", new ViewDataDictionary(Model?.DoctorId)));

		group.Items.AddEmptyItem(); // to align patient on new line

		group.Items.Add(m => m.PatientNo, i => i.Caption = "Patient Number");
		group.Items.Add(m => m.PatientFirstName, i => i.Caption = "Patient First Name");
		group.Items.Add(m => m.PatientLastName, i => i.Caption = "Patient Last Name");
		group.Items.Add(m => m.PatientDateOfBirth, i => i.Caption = "Patient Date of Birth:");
		group.Items.Add(m => m.PatientEmail, i => i.Caption = "Patient Email:");
		group.Items.Add(m => m.PatientSendEmail, i => {
			i.Caption = "Patient Send Email:";
			i.NestedExtension().CheckBox(s => { });
		});

		foreach (var c in controller.CustomFields)
			group.Items.AddGroupItemForMetadata(c);
	}

}
<script>

</script>


@Html.DevExpress().FormLayout(settings =>
	{
	settings.Name = "FormEditSample";

	settings.SettingsItems.ShowCaption = DefaultBoolean.True;
	settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Left;
	settings.Items.AddGroupItem(populateControlsGroup);

	settings.Items.AddGroupItem(group =>
	{
		group.ClientVisible = false;
		group.Items.Add(m => m.LocationId, i => {});
		group.Items.Add(m => m.PatientId, i => { });
	});

	settings.Items.AddSaveCancelButtons(controller.GetGridViewName(), Model);
}).GetHtml()

@Html.DevExpress().ValidationSummary().GetHtml()