@using System.Web.UI.WebControls
@using Sasha.Lims.WebUI.Controllers
@using Sasha.Lims.DataAccess.Entities.Constants
@using Sasha.Lims.WebUI.Infrastructure.ViewModelHelpers
@using Sasha.Lims.WebUI.Models

@model Sasha.Lims.WebUI.Models.SampleViewModel

@{
	JournalType editMode = (JournalType)ViewBag.EditMode;
	bool existsSample = ViewBag.ExistsSample;
	bool canEditPatient = !existsSample;
	bool canEditSample = !existsSample;
	bool canEditModel = canEditSample && editMode == JournalType.Receiving;
	bool canSendReport = editMode == JournalType.Management;
	bool canMakeAliquot = editMode == JournalType.Management && Model.ModelId != SampleModel.Box;
	bool isAliquotMode = editMode == JournalType.Aliquoting;
	SampleModel? containerModel = (SampleModel?)ViewBag.ContainerModel;
	bool isAliquotOnPlate = Model.ModelId == SampleModel.Aliquot && SampleModel.Plate.Equals(containerModel);

	SamplesController controller = (SamplesController)ViewContext.Controller;
}

@Html.DevExpress().FormLayout(settings =>
{
	settings.Name = "FormNewSample";

	settings.SettingsItems.ShowCaption = DefaultBoolean.True;
	settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Left;

	Action<MVCxFormLayoutGroup<SampleViewModel>> fnAddFields = group =>
	{
		group.GroupBoxDecoration = GroupBoxDecoration.None;
		group.ColCount = 2;

		group.Items.Add(m => m.Barcode, i => {
			                                     i.Caption = "Barcode:";

			                                     i.NestedExtension().TextBox(s =>
			                                     {

				                                     s.ClientEnabled = true;
			                                     });

		});
		group.Items.AddGroupItemForVmField(m => m.Name);
		group.Items.Add(m => m.Barcode, i =>
		{
			i.Caption = "";
			i.NestedExtension().Button(s =>
			{
				s.Name = "BarcodeBtn";
				s.Text = "Generate barcode";
				s.ClientSideEvents.Click = "function(){ GenerateBarcode();}";
			});

		});
		group.Items.AddGroupItemForVmField(m => m.CollectedDateTime, canEditSample);
		group.Items.AddGroupItemForVmField(m => m.TubeTypeId, canEditSample);
		group.Items.AddGroupItemForVmField(m => m.SampleTypeId, canEditSample);
		group.Items.AddGroupItemForVmField(m => m.ModelId, canEditModel);

		group.Items.AddGroupItemForVmField(m => m.SampleStatusId);
		group.Items.AddGroupItemForVmField(m => m.SampleWorkflowStatusId);

		group.Items.Add(i =>
		{
			////
			i.Caption = "Location:";
			//i.FieldName = "LocationId";
			i.Name = "EditingLocation";
			if (isAliquotOnPlate) {
				i.Name += "_Disabled";
				i.NestedExtension().TextBox(c => c.Text = controller.GetLocations(Model.LocationId).FirstOrDefault().ShortPath);
				i.NestedExtensionSettings.Enabled = false;
			}
			else {
				i.NestedExtension().DropDownEdit(cb =>
				{
					cb.Properties.ClientSideEvents.Init = "onInitTreeViewLocations";
					cb.Properties.ClientSideEvents.DropDown = "onDropDownTreeViewLocations";
					cb.Properties.NullText = "(No Selection)";
					cb.ReadOnly = true;
					cb.SetDropDownWindowTemplateContent(c => Html.RenderAction("LocationsTreeListPartial", new { selectedId = Model?.LocationId }) );
				});
			}
		});


		group.Items.Add(i => {
			i.Caption = "Conained in";
			i.Name = "BatchLocation";

			if (isAliquotOnPlate)
			{
				i.Name += "_Disabled";
				i.NestedExtension().TextBox(c => c.Text = controller.GetBatchById(new ListEditItemRequestedByValueEventArgs(Model.BatchId, "")).Name);
				i.NestedExtensionSettings.Enabled = false;
			}
			else
			{
				ViewBag.IsBox = Model.ModelId == SampleModel.Box && !canEditModel;
				i.SetNestedContent(() => { Html.RenderPartial("_BatchComboBoxPartial", Model); });
			}
		});

		if(containerModel == SampleModel.Sample || containerModel == SampleModel.Aliquot || canEditModel)
			group.Items.AddEmptyItem();
		else
		{
			group.Items.AddGroupItemForVmField( m => m.Well);
		}

		group.Items.AddEmptyItem();

		group.Items.Add(m => m.MakeAliquot, i =>
		{
			i.Caption = "Make Aliquot:";
			i.NestedExtension().CheckBox(cb => {});
			i.NestedExtensionSettings.Enabled = canMakeAliquot;
			if (!canMakeAliquot || isAliquotMode)
				i.Name += "_Disabled";
		});
		group.Items.AddGroupItemForVmField(m => m.ProcessId).SetNestedContent(() => Html.RenderPartial("~/Views/ProcessList/_ComboBoxPartial.cshtml", new ViewDataDictionary(Model?.ProcessId)));

		group.Items.AddGroupItemForVmField(m => m.DoctorId).SetNestedContent(() => Html.RenderPartial("~/Views/Doctors/_ComboBoxPartial.cshtml", new ViewDataDictionary(Model?.DoctorId)));
		// group.Items.AddEmptyItem(); // to align patient on new line

		group.Items.Add(m => m.PatientNo, i =>
		{
			i.Caption = "Patient Number";
			i.NestedExtensionSettings.Enabled = canEditPatient;
			if (!canEditPatient)
				i.Name += "_Disabled";
		});
		group.Items.Add(m => m.PatientFirstName, i =>
		{
			i.Caption = "Patient First Name";
			i.NestedExtensionSettings.Enabled = canEditPatient;
			if (!canEditPatient)
				i.Name += "_Disabled";
		});

		group.Items.Add(m => m.PatientLastName, i =>
		{
			i.Caption = "Patient Last Name";
			i.NestedExtensionSettings.Enabled = canEditPatient;
			if (!canEditPatient)
				i.Name += "_Disabled";
		});

		group.Items.Add(m => m.PatientDateOfBirth, i =>
		{
			i.Caption = "Patient Date Of Birth:";
			i.NestedExtensionSettings.Enabled = canEditPatient;
			if (!canEditPatient)
				i.Name += "_Disabled";
		});

		group.Items.Add(m => m.PatientEmail, i =>
		{
			i.Caption = "Patient Email:";
			i.NestedExtensionSettings.Enabled = canEditPatient;
			if (!canEditPatient)
				i.Name += "_Disabled";
		});

		group.Items.Add(m => m.PatientSendEmail, i =>
		{
			i.Caption = "Patient Send Email:";
			i.NestedExtensionSettings.Enabled = canEditPatient;
			if (!canEditPatient)
				i.Name += "_Disabled";
			i.NestedExtension().CheckBox(s => {});
		});

		if(canSendReport) {
			group.Items.Add(m => m.SendReport, i =>
			{
				i.Caption = "Send Report:";
				i.NestedExtension().CheckBox(s => { });
			});
		}

		foreach (var c in controller.CustomFields)
			group.Items.AddGroupItemForMetadata(c);
	};

	settings.Items.AddGroupItem(fnAddFields);
	// fields for the case when edit boxes are disabled
	settings.Items.AddGroupItem(group =>
	{
		group.ClientVisible = false;
		group.Items.Add(m => m.LocationId, i =>{ });
		if (!canEditSample)
		{
			group.Items.Add(m => m.Barcode, i => { });
			group.Items.Add(m => m.Name, i => { });
			group.Items.Add(m => m.TubeTypeId, i => { });
			group.Items.Add(m => m.SampleTypeId, i => { });
			//group.Items.Add(m => m.SampleStatusId, i => { });
			group.Items.Add(m => m.CollectedDateTime, i => { });
		}

		if (!canEditModel)
		{
			group.Items.Add(m => m.ModelId, i => { });
		}
		if (!canMakeAliquot || isAliquotMode)
		{
			group.Items.Add(m => m.MakeAliquot, i => { });
		}
		if(isAliquotOnPlate)
		{
			group.Items.Add(m => m.BatchId, i => { });
		}

		group.Items.Add(m => m.PatientId, i => { });
		if (!canEditPatient)
		{
			group.Items.Add(m => m.PatientNo, i => { });
			group.Items.Add(m => m.PatientFirstName, i => { });
			group.Items.Add(m => m.PatientLastName, i => { });
			group.Items.Add(m => m.ClientId, i => { });
			group.Items.Add(m => m.DoctorId, i => { });
			group.Items.Add(m => m.PatientDateOfBirth, i => { });
			group.Items.Add(m => m.PatientEmail, i => { });
			group.Items.Add(m => m.PatientSendEmail, i => { });
			//group.Items.Add(m => m.user_id, i => { });
		}
	});


	settings.Items.AddSaveCancelButtons(controller.GetGridViewName(), Model);

}).GetHtml()

@Html.DevExpress().ValidationSummary().GetHtml()