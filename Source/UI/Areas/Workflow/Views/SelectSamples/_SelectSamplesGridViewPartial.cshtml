@using System.Drawing
@using System.Web.UI.WebControls
@using DevExpress.Utils
@using DevExpress.Web
@using DevExpress.Web.ASPxThemes
@using DevExpress.Web.Mvc
@using DevExpress.Web.Mvc.UI
@using DevExpress.XtraGrid
@using Sasha.Lims.DataAccess.Entities.Constants
@using Sasha.Lims.WebUI.Controllers
@using Sasha.Lims.WebUI.Infrastructure.Helpers
@using Sasha.Lims.WebUI.Infrastructure.ViewModelHelpers
@using Sasha.Lims.WebUI.Localization
@using Sasha.Lims.WebUI.Models
@using Sasha.Lims.DataAccess.Entities.Entity

@model IQueryable<Sasha.Lims.DataAccess.Entities.Entity.vSamplesBook>
@functions {

	private void FillContextMenuItems(object sender, ASPxGridViewContextMenuEventArgs e)
	{
		if (e.MenuType == GridViewContextMenuType.Rows)
		{
			var item = e.Items.FindByCommand(GridViewContextMenuCommand.DeleteRow);
			e.Items.Remove(item);
			item = e.Items.FindByCommand(GridViewContextMenuCommand.NewRow);
			e.Items.Remove(item);
			item = e.Items.FindByCommand(GridViewContextMenuCommand.Refresh);
			e.Items.Remove(item);
			item = e.Items.FindByCommand(GridViewContextMenuCommand.EditRow);
			e.Items.Remove(item);
			item = e.Items.Add("Add selected Samples to process", "AddSamples");
			item.Image.Url = "~/Content/Images/Status/Included.png";
			item.Image.Height = 16;
			//item = e.Items.Add("Remove selected Samples from process", "RemoveSamples");
			//item.Image.Url = "~/Content/Images/Status/Delete.png";
			//item.Image.Height = 16;
		}
	}
}
@{

	var gridView = Html.DevExpress().GridView(settings =>
	{

		SettingHelper.InitAdvancedGridSettings(settings, "SelectSamples", ViewContext);
		settings.CallbackRouteValues = new { Action = "CallbackRouteValues", Controller = "SelectSamples", Area = "Workflow", processId = ViewBag.ProcessId };
		settings.SettingsBehavior.EnableCustomizationWindow = false;

		SampleApprovedViewModel vm = null;

		//		settings.SettingsBehavior.ProcessFocusedRowChangedOnServer = false;
		settings.SettingsBehavior.AllowFocusedRow = true;
		settings.SettingsBehavior.AllowSelectByRowClick = true;

		settings.SettingsBehavior.EnableCustomizationWindow = true;
		settings.SettingsExport.EnableClientSideExportAPI = true;

		settings.SettingsContextMenu.Enabled = true;
		settings.SettingsContextMenu.EnableRowMenu = DefaultBoolean.True;
		settings.FillContextMenuItems = FillContextMenuItems;
		settings.ClientSideEvents.ContextMenuItemClick = "onContextMenuItemClick";

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Id";
			columnSettings.Caption = "Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
			columnSettings.Visible = false;
		}); //Id

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "ProcessId";
			columnSettings.Caption = "Included";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
			columnSettings.SetDataItemTemplateContent(c =>
			{
				var processId = DataBinder.Eval(c.DataItem, "ProcessId");
				if (processId == null || processId.ToString() != ViewBag.ProcessId.ToString()) return;
				string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content(string.Format("~/Content/Images/Status/Included.png"));
				ViewContext.Writer.Write("<img src=\"{0}\" style=\"width:20px\" />", imageUrl);
			});
		}); //Id

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Barcode";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Barcode));
			columnSettings.MinWidth = 100;
			columnSettings.Width = 100;
		}); //Barcode

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Name";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Name));
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		}); //Name

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Location";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Location));
			columnSettings.MinWidth = 200;
		}); //Location

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "SampleType";
			columnSettings.Caption = "Sample Type ";

			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
		}); //Sample Type

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "BatchName";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Box));
			columnSettings.MinWidth = 200;
		}); //BatchName

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Well";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Well));
		}); //Well

		Html.AddColmmentCountColumn(settings, false); //Comment
		Html.AddFilesCountColumn(settings, false); //Comment

		//AddPropComboBoxColumn(settings, "SampleWorkflowStatusId", nameof(ViewModelFields.Sample_WorkflowStatus), PropsType.ProcessStatus);
		SettingHelper.AddPropComboBoxColumn(settings, "SampleWorkflowStatusId", Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_WorkflowStatus)), PropsType.ProcessStatus);


		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "ProcessName";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Process));
		}); //ProcessName

		settings.Columns.AddColumnForVmField(vm, m => m.Volume);

		settings.Columns.AddColumnForVmField(vm, m => m.CollectedDateTime);

		//AddPropComboBoxColumn(settings, "SampleStatusId", "Status", PropsType.SampleStatuses);
		SettingHelper.AddPropComboBoxColumn(settings, "SampleStatusId", Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_SampleStatus)), PropsType.SampleStatuses);

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Sended";
			columnSettings.MinWidth = 200;
		}); //BatchName


		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "UserName";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_User));
		}); //UserId

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "IsChild";
			columnSettings.Caption = "quot";
			columnSettings.ColumnType = MVCxGridViewColumnType.CheckBox;
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
		}); //quot

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "ParentName";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Parent));
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
		}); //PatentSampleName

		settings.Columns.AddColumnForVmField(vm, m => m.ModelId);

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Patient";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Patient));
		}); // Patient

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Doctor";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Doctor));

		}); //Doctor

		SettingHelper.AddCustomColumns(settings, ViewContext.Controller);


		//Command columns settings
		SettingHelper.AddCommandColumn(settings);

		settings.SettingsDataSecurity.AllowReadUnlistedFieldsFromClientApi = DefaultBoolean.True;

		settings.CustomJSProperties = (sender, e) =>
		{
			var Grid = sender as MVCxGridView;
			var dictionary = new System.Collections.Generic.Dictionary<object, string>();

			for (int i = 0; i < Grid.SettingsPager.PageSize; i++)
			{
				var visibleIndex = i + Grid.VisibleStartIndex;
				if (visibleIndex >= Grid.VisibleRowCount)
					break;

				object[] rowValues = (object[])Grid.GetRowValues(visibleIndex, Grid.KeyFieldName, "RowVersion");
				dictionary[(rowValues[0] ?? 0).ToString()] = Convert.ToBase64String((byte[])(rowValues[1] ?? new byte[] { }));
			}

			e.Properties["cpRowVersions"] = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(dictionary);
			e.Properties["cpRowCount"] = Grid.VisibleRowCount;

			if (ViewData["EditError"] != null)
				e.Properties["cpEditError"] = ViewData["EditError"];
		};

		settings.CustomJSProperties = (s, e) => e.Properties["cpFilterExpression"] = ((ASPxGridView)s).FilterExpression;
		settings.DataBound = (s, e) =>
		{
			if (ViewData["filterExpression"] != null)
				((ASPxGridView)s).FilterExpression = ViewData["filterExpression"].ToString();
		};

		//Command columns settings
		SettingHelper.AddCommandColumn(settings);

		settings.ClientSideEvents.Init = "onGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "onGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "onGridViewBeginCallback";
		settings.ClientSideEvents.SelectionChanged = "onSelectionChanged";
	});

	if (Model == null)
	{
		gridView.GetHtml();
	}
	else
	{
		gridView.BindToEF(string.Empty, string.Empty, (s, e) =>
		{
			e.QueryableSource = Model;
			e.KeyExpression = "Id";
		}, (s, e) =>
		{
			// Handle internal exception
			var mess = e.Exception?.InnerException.Message ?? e.Exception.Message;
			mess = "<div style='color:red'>" + mess + "</div>";
			ViewContext.Writer.Write(mess); //пишу error прямо на экран
		}).GetHtml();

	}

}