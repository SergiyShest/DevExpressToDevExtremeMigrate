@using System.Drawing
@using System.Web.UI.WebControls
@using DevExpress.Utils
@using DevExpress.Web
@using Sasha.Lims.Core.Helpers
@using DevExpress.Web.Mvc.UI


@using Sasha.Lims.WebUI.Infrastructure.Helpers
@functions {
	private void FillContextMenuItems(object sender, ASPxGridViewContextMenuEventArgs e)
	{
		if (e.MenuType == GridViewContextMenuType.Rows)
		{
			var item = e.Items.FindByCommand(GridViewContextMenuCommand.DeleteRow);
			e.Items.Remove(item);
			item = e.Items.FindByCommand(GridViewContextMenuCommand.NewRow);
			e.Items.Remove(item);
			item = e.Items.FindByCommand(GridViewContextMenuCommand.Refresh);
			e.Items.Remove(item);
			item = e.Items.FindByCommand(GridViewContextMenuCommand.EditRow);
			e.Items.Remove(item);
			item = e.Items.Add("Edit", "Edit");
			item.Image.Url = "~/Content/Images/edit.svg";
			item = e.Items.Add("Samples", "Samples");
			item.Image.Url = "~/Content/Images/aliquoting.svg";
		}
	}
}
@{
	var gridView = Html.DevExpress().GridView(settings =>
	{

		SettingHelper.InitAdvancedGridSettings(settings, "CustodyLogJournal", ViewContext);

		settings.Settings.ShowGroupPanel = true;
		settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;//все колонки сжимаются
		settings.SettingsPager.PageSize = 50;
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Id";
			columnSettings.Caption = "Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 50;
			columnSettings.Visible = false;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "SampleId";
			columnSettings.Caption = "Sample Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 50;
			columnSettings.Visible = true;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Barcode";
			columnSettings.Caption = "Barcode";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});//Barcode

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "SampleName";
			columnSettings.Caption = "Name";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});//SampleName
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Status";
			columnSettings.Caption = "Status";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});//Status
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "DateTime";
			columnSettings.Caption = "Action Date Time";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;

		});//DateTime
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Operation";
			columnSettings.Caption = "Operation";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;

		});//Operation
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "AmountInOut";
			columnSettings.Caption = "Amount";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});// AmountInOut
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Signature";
			columnSettings.Caption = "Signature";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});//Signature
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Location";
			columnSettings.Caption = "Location";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});//Signature
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "batchBarcode";
			columnSettings.Caption = "batch Barcode";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});//batchBarcode
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "batchId";
			columnSettings.Caption = "batch Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
			columnSettings.Visible = false;
		});//batchId
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "UserName";
			columnSettings.Caption = "UserName";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 50;

		});//UserName
		settings.DataBound = (s, e) =>
		{
			if (ViewData["filterExpression"] != null)
				((ASPxGridView)s).FilterExpression = ViewData["filterExpression"].ToString();
		};


		SettingHelper.AddCommandColumn(settings);
		settings.ClientSideEvents.SelectionChanged = "onGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "onGridViewBeginCallback";
		settings.ClientSideEvents.EndCallback = "onGridViewEndCallback";
		settings.ClientSideEvents.CustomizationWindowCloseUp = "onGridCustomizationWindowCloseUp";
		settings.ClientSideEvents.RowDblClick = "onRowDblClick";
		settings.ClientSideEvents.Init = "onGridViewInit";
		//	settings.ClientSideEvents.FocusedRowChanged = "onFocusedRowChanged";

	});
	if (Model == null)
	{
		@gridView.GetHtml()
	}
	else
	{

		
		@gridView.BindToEF(string.Empty, string.Empty, (s, e) =>
   {
	   e.QueryableSource = Model;
	   e.KeyExpression = "Id";
   }, (s, e) =>
   {
	   // Handle internal exception
	   var mess = e.Exception.GetAllMessages();
	   mess = "<div style='color:red'>" + mess + "</div>";
	   ViewContext.Writer.Write(mess); //пишу ошибку прямо на экран
   }).GetHtml()
	}
}
