@using Sasha.Lims.Core.Helpers
@using System.Web.UI.WebControls
@using DevExpress.Web
@using DevExpress.Web.Mvc.UI
@using Sasha.Lims.DataAccess.Entities.Constants
@using Sasha.Lims.WebUI.Infrastructure.Helpers
@using Sasha.Lims.WebUI.Localization

@model IQueryable<Sasha.Lims.DataAccess.Entities.Entity.vCustodyLog>

@{
	
	ViewBag.Title = "Custody Log";
	Layout = "~/Views/Shared/_SamplesLayout.cshtml";
}
<h1>Custody Log</h1>
@section Head {
	<script>var tableId=@((int)TableType.Doctor)</script>
	<script src="@Url.Content("~/Scripts/Properties/commonGridView.js?v=" + AppVersionHelper.Version)"></script>

	<script>
		window.addEventListener("load", init);
		window.addEventListener("message", receiveMessage, false);

		function init() {
			gridView.PerformCallback({ filterExpression:"@(new HtmlString(ViewData["filterExpr"]?.ToString()))"});
		}

		var SelectedOrFocusedIdsStr = '';


		function onGridViewSelectionOrFocusChanged() {
			updateToolbarButtonsState();

		}

		// перед поднятием контекстного меню над основным гридом
		function OnGridContextMenu(s, e) {


		}

		function onGridViewSelectionChanged(s, e) {


		}

		function updateToolbarButtonsState() {
			
		}

		function onPageToolbarItemClick(s, e) {
			switch (e.item.name) {
			case "btShowColumnChooser":
					onShowChooserClick(s, e);
					break;

			case "Export":
				gridView.ExportTo(ASPxClientGridViewExportFormat.Xlsx);
				break;
			default:
			}
		}

		function refreshGrid(event) {
			if (typeof event.data === 'string' && event.data.indexOf('RefreshGrid') > -1) {
				gridView.Refresh();
			}
		}

		//прием сообщения
		function receiveMessage(event) {
			refreshGrid(event);
		}



		function onGridViewBeginCallback(s, e) {

			//LoadingPanel.Show();

		}

		function onGridViewEndCallback(s, e) {
			LoadingPanel.Hide();
			updateToolbarButtonsState();
		}



	</script>
}


@Html.DevExpress().Menu(menuSettings =>
{
	var unit16px = System.Web.UI.WebControls.Unit.Pixel(16);

	menuSettings.Name = "pageToolbar";

	menuSettings.ItemAutoWidth = false;
	menuSettings.AllowSelectItem = false;
	menuSettings.ApplyItemStyleToTemplates = true;

	menuSettings.SettingsAdaptivity.Enabled = true;
	menuSettings.SettingsAdaptivity.EnableAutoHideRootItems = true;
	menuSettings.SettingsAdaptivity.EnableCollapseRootItemsToIcons = true;
	menuSettings.SettingsAdaptivity.CollapseRootItemsToIconsAtWindowInnerWidth = 600;

	menuSettings.Width = Unit.Percentage(100);
	menuSettings.ControlStyle.SeparatorWidth = Unit.Pixel(0);
	menuSettings.ControlStyle.CssClass = "page-toolbar";

	menuSettings.Styles.Item.CssClass = "item";
	menuSettings.Styles.Item.VerticalAlign = VerticalAlign.Middle;

	menuSettings.Images.Item.Width = unit16px;
	menuSettings.Images.Item.Height = unit16px;

	menuSettings.Items.Add(item =>
	{
		item.Name = "Title";
		item.Text = ViewBag.Title;
		item.ClientEnabled = false;
		item.ItemStyle.Font.Bold = true;
		item.Alignment = MenuItemAlignment.Left;
		item.ItemStyle.CssClass = "titleMenuItemStyle";
	});// Title



	menuSettings.Items.Add(item =>
	{
		item.Name = "btShowColumnChooser";
		item.Text = "Columns";
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 2;
		item.Image.Url = "~/Content/Images/table_v2.svg";
	});// btShowColumnChooser



	menuSettings.Items.Add(item =>
	{
		item.Name = "Export";
		item.Text = "Export";
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 5;
		item.Image.Url = "~/Content/Images/export.svg";
	});

	menuSettings.ClientSideEvents.ItemClick = "onPageToolbarItemClick";

}).GetHtml()


<form>
	@Html.Partial("_gridViewPartial", Model)


</form>





