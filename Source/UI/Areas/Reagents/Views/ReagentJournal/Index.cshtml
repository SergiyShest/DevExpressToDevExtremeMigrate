@using Sasha.Lims.Core.Helpers
@using System.Web.UI.WebControls
@using DevExpress.Web
@using DevExpress.Web.Mvc.UI
@using Sasha.Lims.DataAccess.Entities.Constants
@using Sasha.Lims.WebUI.Infrastructure.Helpers
@using Sasha.Lims.WebUI.Localization

@model IQueryable<Sasha.Lims.DataAccess.Entities.Entity.vReagent>

@{
	
	ViewBag.Title = "Reagents journal";
	Layout = "~/Views/Shared/_SamplesLayout.cshtml";
}

@section Head {
	<script>var tableId =@((int)TableType.Reagent)</script>
	<script src="@Url.Content("~/Scripts/Properties/commonGridView.js?v=" + AppVersionHelper.Version)"></script>

	<script>
		window.addEventListener("load", init);
	window.addEventListener("message", receiveMessage, false);


	function init() {
			gridView.PerformCallback({ filterExpression:"@(new HtmlString(ViewData["filterExpr"]?.ToString()))"});
	}

	var SelectedOrFocusedIdsStr = '';


	function onGridViewSelectionOrFocusChanged() {
		updateToolbarButtonsState();

	}


	// перед поднятием контекстного меню над основным гридом
	function OnGridContextMenu(s, e) {


	}

	function onGridViewSelectionChanged(s, e) {


	}

	function updateToolbarButtonsState() {
		var hasFocused = gridView.GetFocusedRowIndex() > -1
		pageToolbar.GetItemByName("Discard").SetEnabled(hasFocused);

		pageToolbar.GetItemByName("Edit").SetEnabled(hasFocused);

		pageToolbar.GetItemByName("Copy").SetEnabled(hasFocused);
	}

	function onPageToolbarItemClick(s, e) {
		switch (e.item.name) {

			case "Edit":
				edit();
				break;

			case "Add":
				add();
				break;
			case "Discard":
				DiscardfSelectedRecords();
				break;
			case "btCommentSample":
				CommentSelectedRow();
				break;
			case "btAttachedFiles":
				AttachedFiles();
				break;
			case "btShowColumnChooser":
				onShowChooserClick(s, e);
				break;
			case "Copy":
				copy();
				break;
			case "Export":
				gridView.ExportTo(ASPxClientGridViewExportFormat.Xlsx);
				break;
			default:
		}
	}

	function onContextMenuItemClick(item, row) {

		switch (row.item.name) {

			case "Edit":
				edit();
				break;
			case "Copy":
				copy();
				break;
			case "Discard":
				DiscardfSelectedRecords();
				break;


		}
	}


	function refreshGrid(event) {
		if (typeof event.data === 'string' && event.data.indexOf('RefreshGrid') > -1) {
			gridView.Refresh();
		}
	}


	//прием сообщения
	function receiveMessage(event) {
		refreshGrid(event);
		if (typeof event.data === 'string' && event.data.indexOf('SelectReagentTypeForAdd') > -1) {
			var arr = event.data.split('=');
			if (arr[1]) {
				var arr2 = arr[1].split(',')
				var firstId = arr2[0]
				ShowUrlPopup("New Reagent ", '@Url.Action("Index", "ReagentEdit", new {Area = "Reagents" })?id=' + '&reagentTypeId=' + firstId, document.documentElement.clientWidth - 150);
			}
		}
	}





		function DiscardfSelectedRecords() {

		    var selectedIds = GetSelectedOrFocusedRowsId();
			dxConfirm("Are you sure to Discard selected " + selectedIds.length+" reagents?")
			.success(function () {
				var selectedOrFocusedIdsStr = SelectedIdsToString(selectedIds);
				gridView.PerformCallback({ customAction: 'delete', selectedIds: selectedOrFocusedIdsStr });
			});
	}


	function add() {
		var varName = 'SelectReagentTypeForAdd'
		ShowUrlPopup("Select Reagent Type", '@Url.Action("SelectReagentType", "ReagentTypeJournal", new {Area = "Reagents"})?varName=' + varName + '&showSelectCancelButtons=true', document.documentElement.clientWidth - 150);
		//after close management will be transferred  to receiveMessage(event)
	}

	function edit() {

		var ind = gridView.GetFocusedRowIndex();
		if (ind < 0) return;
		var id = gridView.GetRowKey(ind)

		ShowUrlPopup("Edit Reagent ", '@Url.Action("Index", "ReagentEdit", new {Area = "Reagents" })?id=' + id, document.documentElement.clientWidth - 150);
	}

	function copy() {

		var ind = gridView.GetFocusedRowIndex();
		if (ind < 0) return;
		var id = gridView.GetRowKey(ind)

		ShowUrlPopup("Copy Reagent ", '@Url.Action("Copy", "ReagentEdit", new {Area = "Reagents" })?id=' + id, document.documentElement.clientWidth - 150);
	}


	function onRowDblClick() {
		if ('@ViewBag.ShowSelectCancelButtons' != 'True') {
			edit();
		} else {
			Select();
		}

	}



	function onGridViewBeginCallback(s, e) {

		//LoadingPanel.Show();

	}

	function onGridViewEndCallback(s, e) {
		LoadingPanel.Hide();
		updateToolbarButtonsState();
	}



	</script>
}


@Html.DevExpress().Menu(menuSettings =>
{
	var unit16px = System.Web.UI.WebControls.Unit.Pixel(16);

	menuSettings.Name = "pageToolbar";

	menuSettings.ItemAutoWidth = false;
	menuSettings.AllowSelectItem = false;
	menuSettings.ApplyItemStyleToTemplates = true;

	menuSettings.SettingsAdaptivity.Enabled = true;
	menuSettings.SettingsAdaptivity.EnableAutoHideRootItems = true;
	menuSettings.SettingsAdaptivity.EnableCollapseRootItemsToIcons = true;
	menuSettings.SettingsAdaptivity.CollapseRootItemsToIconsAtWindowInnerWidth = 600;

	menuSettings.Width = Unit.Percentage(100);
	menuSettings.ControlStyle.SeparatorWidth = Unit.Pixel(0);
	menuSettings.ControlStyle.CssClass = "page-toolbar";

	menuSettings.Styles.Item.CssClass = "item";
	menuSettings.Styles.Item.VerticalAlign = VerticalAlign.Middle;

	menuSettings.Images.Item.Width = unit16px;
	menuSettings.Images.Item.Height = unit16px;

	menuSettings.Items.Add(item =>
	{
		item.Name = "Title";
		item.Text = ViewBag.Title;
		item.ClientEnabled = false;
		item.ItemStyle.Font.Bold = true;
		item.Alignment = MenuItemAlignment.Left;
		item.ItemStyle.CssClass = "titleMenuItemStyle";
	});// Title



	menuSettings.Items.Add(item =>
	{
		item.Name = "btShowColumnChooser";
		item.Text = "Columns";
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 2;
		item.Image.Url = "~/Content/Images/table_v2.svg";
	});// btShowColumnChooser


	Html.AddMenuFilesAndComments(menuSettings);

	menuSettings.Items.Add(item =>
	{
		item.Name = "Add";
		item.Text = Html.GetLocalizedText<UI>(nameof(UI.ButtonAdd));
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 3;
		item.Image.Url = "~/Content/Images/add.svg";

	});
	menuSettings.Items.Add(item =>
	{
		item.Name = "Edit";
		item.Text = Html.GetLocalizedText<UI>(nameof(UI.ButtonEdit));
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 3;
		item.Image.Url = "~/Content/Images/edit.svg";

	});

	menuSettings.Items.Add(item =>
	{
		item.Name = "Copy";
		item.Text = "Copy";
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 4;

		item.Image.Url = "~/Content/Images/move.svg";
		item.Image.Width = unit16px;
		item.Image.Height = unit16px;
	});
	menuSettings.Items.Add(item =>
	{
		item.Name = "Discard";
		item.Text = "Discard";
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 4;
		item.Image.Url = "~/Content/Images/delete_v2.svg";
		item.Image.Width = unit16px;
		item.Image.Height = unit16px;
	});
	menuSettings.Items.Add(item =>
	{
		item.Name = "Export";
		item.Text = "Export";
		item.Alignment = MenuItemAlignment.Right;
		item.AdaptivePriority = 5;
		item.Image.Url = "~/Content/Images/export.svg";
	});

	menuSettings.ClientSideEvents.ItemClick = "onPageToolbarItemClick";

}).GetHtml()


<form>
	@Html.Partial("_gridViewPartial", Model)
</form>
	@if (ViewBag.ShowSelectCancelButtons == true)
	{
	<script>
	
	function Select() {

		var selectedIds = gridView.GetSelectedKeysOnPage();
		window.parent.postMessage("@ViewBag.varName=" + selectedIds, '*'); //send message parent window for  close this form
		cancelForm();
	}
	function cancelForm() {
		window.parent.postMessage("CloseUrlForm", '*'); //send message parent window for  close this form
	}
	</script>
		<div style="display: flex;
		justify-content: flex-end;
		margin: 5px">
			<button name="SelectPatientBtn"
					onclick="Select()"
					class="dxbButton_@DataHelper.Current.UiTheme dxbButtonSys dxbTSys dx-button"
					style="-webkit-user-select:none;padding:6px;margin: 3px; width: 50px;">
				OK
			</button>
			<button onclick="cancelForm()" class="dxbButton_@DataHelper.Current.UiTheme dxbButtonSys dxbTSys dx-button" style="-webkit-user-select:none;padding:6px;margin: 3px; width: 50px;">
				Close
			</button>
		</div>
	}







