@using System.Drawing
@using System.Web.UI.WebControls
@using DevExpress.Utils
@using DevExpress.Web
@using DevExpress.Web.Mvc
@using DevExpress.Web.Mvc.UI
@using Sasha.Lims.DataAccess.Entities.Constants

@using Sasha.Lims.WebUI.Infrastructure.Helpers

@{
	var gridView = Html.DevExpress().GridView(settings =>
	{

		SettingHelper.InitAdvancedGridSettings(settings, "ReagentLogJournal", ViewContext);

		settings.KeyFieldName = "Id";
		settings.SettingsContextMenu.EnableRowMenu = DefaultBoolean.False;


		settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;//все колонки сжимаются
		settings.SettingsPager.PageSize = 50;
		settings.Settings.ShowGroupPanel = true;
		settings.SettingsBehavior.AutoExpandAllGroups = true;
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Id";
			columnSettings.Caption = "Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 50;
			columnSettings.Visible = false;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Name";
			columnSettings.Caption = "Name";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "ReagentId";
			columnSettings.Caption = "Reagent Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
			columnSettings.GroupIndex = 0;
		});

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "IsExists";
			columnSettings.Caption = "Is Writed Of";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
			columnSettings.ColumnType = MVCxGridViewColumnType.CheckBox;
			(columnSettings.PropertiesEdit as MVCxColumnCheckBoxProperties).ValueChecked = 1;
			(columnSettings.PropertiesEdit as MVCxColumnCheckBoxProperties).ValueUnchecked = 0;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Quantity";
			columnSettings.Caption = "Quantity";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "UnitName";
			columnSettings.Caption = "Unit Name";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;

		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Location";
			columnSettings.Caption = "Location";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 200;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "OperationName";
			columnSettings.Caption = "Operation Name";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 200;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "OperationDate";
			columnSettings.Caption = "Date";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
			columnSettings.ColumnType = MVCxGridViewColumnType.DateEdit;
		});
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "OperationDate";
			columnSettings.Caption = "Time";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
			columnSettings.ColumnType = MVCxGridViewColumnType.TimeEdit;
		});
		settings.DataBound = (s, e) =>
		{
			if (ViewData["filterExpression"] != null)
				((ASPxGridView)s).FilterExpression = ViewData["filterExpression"].ToString();
		};


		settings.ClientSideEvents.BeginCallback = "onGridViewBeginCallback";
		settings.ClientSideEvents.EndCallback = "onGridViewEndCallback";
		settings.ClientSideEvents.CustomizationWindowCloseUp = "onGridCustomizationWindowCloseUp";

		settings.ClientSideEvents.Init = "onGridViewInit";


	});
	if (Model == null)
	{
		@gridView.GetHtml()
	}
	else
	{
		@gridView.BindToEF(string.Empty, string.Empty, (s, e) =>
			{
				e.QueryableSource = Model;
				e.KeyExpression = "Id";
			}, (s, e) =>
			{
				// Handle internal exception
				var mess = e.Exception?.InnerException.Message ?? e.Exception.Message;
				mess = "<div style='color:red'>" + mess + "</div>";
				ViewContext.Writer.Write(mess); //пишу ошибку прямо на экран
			}).GetHtml()
	}
}
