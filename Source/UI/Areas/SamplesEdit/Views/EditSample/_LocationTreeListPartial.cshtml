@using System.Web.UI.WebControls
@using DevExpress.Web.ASPxTreeList
@using DevExpress.Web.Mvc
@using DevExpress.Web.Mvc.UI

@{
	var treeList = Html.DevExpress().TreeList(treeListSettings =>
	{
		treeListSettings.Name = "treeListLocations";
		treeListSettings.CallbackRouteValues = new
		{
			Area= "SamplesEdit",
			Controller = "EditSample",
			Action = "LocationsTreeListPartial",
		};
		treeListSettings.ParentFieldName = "ParentId";
		treeListSettings.KeyFieldName = "Id";
		treeListSettings.Width = Unit.Percentage(100);

		treeListSettings.SettingsSelection.AllowSelectAll = true;
		treeListSettings.SettingsBehavior.AutoExpandAllNodes = true;
		treeListSettings.SettingsBehavior.FocusNodeOnExpandButtonClick = false;
		treeListSettings.SettingsBehavior.AllowFocusedNode = true;
		treeListSettings.SettingsBehavior.ExpandCollapseAction = TreeListExpandCollapseAction.Button;
		treeListSettings.SettingsSelection.Enabled = false;
		treeListSettings.SettingsSelection.Recursive = false;
		//treeListSettings. = false;
		treeListSettings.SettingsPager.Mode = DevExpress.Web.ASPxTreeList.TreeListPagerMode.ShowAllNodes;

		treeListSettings.SettingsLoadingPanel.Delay = 0;
		treeListSettings.Settings.ShowColumnHeaders = false;
		treeListSettings.Settings.GridLines = System.Web.UI.WebControls.GridLines.None;
		treeListSettings.Settings.ShowTreeLines = true;

		//treeListSettings.AutoGenerateColumns = true;
		treeListSettings.Columns.Add(column => { column.FieldName = "Code"; column.Visible = false; });
		treeListSettings.Columns.Add(column => { column.FieldName = "Value"; column.Visible = false; });
		treeListSettings.Columns.Add(column => { column.FieldName = "Path"; column.Visible = false; });
		treeListSettings.Columns.Add(column => { column.FieldName = "Name"; });

		treeListSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
		treeListSettings.RootValue = null;

		treeListSettings.ClientSideEvents.FocusedNodeChanged = "onFocusedNodeChangedTreeViewLocations";
		treeListSettings.ClientSideEvents.NodeDblClick = "onCustomButtonClickTreeViewLocations";

		treeListSettings.PreRender = (sender, e) =>
		{
			var treeListRootNode = ((MVCxTreeList)sender).Nodes[0];

			SetExpandedNodeProperty(treeListRootNode, (int)(ViewBag.LocationSelectedId ?? 0), 0);
			if(ViewBag.LocationSelectedId!=null)
			{var seeNode = (sender as MVCxTreeList).FindNodeByKeyValue(ViewBag.LocationSelectedId.ToString())as  TreeListNode;
				if (seeNode != null)
				{
					seeNode.Selected = true;
					seeNode.Focus();
				}
			}
			void SetExpandedNodeProperty(TreeListNode node, int locationId,int level)
			{
				level++;
				var fieldId = (int)(node.GetValue("Id") ?? 0);

				if ( level<1 ||(  locationId > 0 && locationId == fieldId))
				{
					ExpandParentNode(node,  level);
				}
				if (locationId == fieldId)
				{
					return;
				}
				node.Expanded = false;

				foreach (TreeListNode childNode in node.ChildNodes)
				{
					SetExpandedNodeProperty(childNode, locationId, level);
				}
			}
			void ExpandParentNode(TreeListNode node, int level)
			{
				if (node.ParentNode != null)
				{
					node.ParentNode.Expanded = true;
					ExpandParentNode(node.ParentNode,level);
				}
			}
		};

	});
}
@treeList.Bind(Model).GetHtml()