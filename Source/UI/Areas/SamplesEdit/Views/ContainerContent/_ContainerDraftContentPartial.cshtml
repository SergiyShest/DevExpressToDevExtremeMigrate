@using DevExpress.Utils
@using DevExpress.Web
@using DevExpress.Web.Mvc
@using DevExpress.Web.Mvc.UI
@using DevExpress.XtraGrid
@using Sasha.Lims.DataAccess.Entities.Constants
@using Sasha.Lims.WebUI.Controllers
@using Sasha.Lims.WebUI.Infrastructure.Helpers
@using Sasha.Lims.WebUI.Infrastructure.ViewModelHelpers
@using Sasha.Lims.WebUI.Localization
@using Sasha.Lims.WebUI.Models
@model IQueryable<Sasha.Lims.DataAccess.Entities.Entity.vJourLine>

@{

	var gridView = Html.DevExpress().GridView(settings =>
	{

		SettingHelper.InitAdvancedGridSettings(settings, "", ViewContext);
		settings.CallbackRouteValues = new { Controller = "ContainerContent", Action = "CallbackDraftRouteValues",containerId = ViewBag.RowId };
		settings.Settings.ShowFilterBar = GridViewStatusBarMode.Hidden;
		SampleViewModel vm = null;
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Id";
			columnSettings.Caption = "Id";
			columnSettings.MinWidth = 50;
			columnSettings.Width = 100;
			columnSettings.Visible = false;
		}); //IdViewData["ContainerId"]

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Barcode";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Barcode));
			columnSettings.MinWidth = 100;
			columnSettings.Width = 100;

		}); //Barcode

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Name";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Name));
			columnSettings.MinWidth = 50;
			columnSettings.Width = 150;
		}); //Name

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Location";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Location));
			columnSettings.MinWidth = 200;
		}); //Location

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "BatchName";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Box));
			columnSettings.MinWidth = 200;
		}); //BatchName



		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Well";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Well));
		}); //Well

		Html.AddColmmentCountColumn(settings, false); //Comment


		settings.Columns.Add("CollectedDate", "CollectedDate");

		SettingHelper.AddPropComboBoxColumn(settings, "Status", Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_SampleStatus)), PropsType.SampleStatuses);

		//settings.Columns.Add(columnSettings =>
		//{
		//	columnSettings.FieldName = "UserName";
		//	columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_User));
		//}); //UserId

		//settings.Columns.Add(columnSettings =>
		//{
		//	columnSettings.FieldName = "IsChild";
		//	columnSettings.Caption = "Aliquot";
		//	columnSettings.ColumnType = MVCxGridViewColumnType.CheckBox;
		//	columnSettings.MinWidth = 50;
		//	columnSettings.Width = 100;
		//}); //Aliquot

		//settings.Columns.Add(columnSettings =>
		//{
		//	columnSettings.FieldName = "ParentName";
		//	columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Parent));
		//	columnSettings.MinWidth = 50;
		//	columnSettings.Width = 100;
		//}); //PatentSampleName

		settings.Columns.AddColumnForVmField(vm, m => m.ModelId);

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Patient";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Patient));
		}); // Patient

		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Doctor";
			columnSettings.Caption = Html.GetLocalizedText<ViewModelFields>(nameof(ViewModelFields.Sample_Doctor));

		}); //Doctor
		settings.Columns.Add(columnSettings =>
		{
			columnSettings.FieldName = "Type";
			columnSettings.Caption = "Type";

		}); //Type


		//Command columns settings
		SettingHelper.AddCommandColumn(settings);

		settings.SettingsDataSecurity.AllowReadUnlistedFieldsFromClientApi = DefaultBoolean.True;

		settings.CustomJSProperties = (sender, e) =>
		{
			var Grid = sender as MVCxGridView;
			var dictionary = new System.Collections.Generic.Dictionary<object, string>();

			for (int i = 0; i < Grid.SettingsPager.PageSize; i++)
			{
				var visibleIndex = i + Grid.VisibleStartIndex;
				if (visibleIndex >= Grid.VisibleRowCount)
					break;

				object[] rowValues = (object[])Grid.GetRowValues(visibleIndex, Grid.KeyFieldName, "RowVersion");
				dictionary[(rowValues[0] ?? 0).ToString()] = Convert.ToBase64String((byte[])(rowValues[1] ?? new byte[] { }));
			}

			e.Properties["cpRowVersions"] = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(dictionary);
			e.Properties["cpRowCount"] = Grid.VisibleRowCount;

			if (ViewData["EditError"] != null)
				e.Properties["cpEditError"] = ViewData["EditError"];
		};

		settings.ClientSideEvents.Init = "onGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "onGridViewSelectionChanged";
		settings.ClientSideEvents.FocusedRowChanged = "onGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "onGridViewBeginCallback";

		settings.ClientSideEvents.CustomizationWindowCloseUp = "onGridCustomizationWindowCloseUp";

	});


	if (Model == null)
	{
		@gridView.GetHtml()
	}
	else
	{

		@gridView.BindToEF(string.Empty, string.Empty, (s, e) =>
	{
		e.QueryableSource = Model;
		e.KeyExpression = "Id";
	}, (s, e) =>
	{
		// Handle internal exception
		var mess = e.Exception?.InnerException.Message ?? e.Exception.Message;
		mess = "<div style='color:red'>" + mess + "</div>";
						 ViewContext.Writer.Write(mess);//пишу error прямо на экран
	}).GetHtml()
	}

}